@using Newtonsoft.Json
@model RelativityScriptModel
@{
    ViewBag.Title = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .schedule-container{
        display : flex;
        flex-direction :row;
    }

    .job-schedule h4 {
        font-size: 12pt;
        font-weight: bold;
    }

    .job-schedule {
        flex-basis: 25%;
        font-size: 10pt;
        border: 1px solid #dfdfdf;
        margin-right: 2%;
        padding: 5px;
    }

</style>


<div id="relativity-script">
    <h2>@ViewBag.Title</h2>
    <h4>Script Scheduling Information</h4>
    <h4><a href="@Url.Action("List", new { relativityWorkspaceId = Model.RelativityWorkspace.WorkspaceId })">@Model.RelativityWorkspace.Name</a></h4>
    <div class="schedule-container" data-bind="foreach : JobSchedules">
        <div class="job-schedule">
            <h4><a data-bind="text : Name, attr : { href : JobScheduleUrl }"></a></h4>
            <span data-bind="text : StatusDescription"></span>
            <p>Runs At <span data-bind="text : TimeOfDay"></span></p>
            <p>
                Runs On
                <ul class="day-list" data-bind="foreach : DaysExecuted">
                    <li data-bind="text : $data"></li>
                </ul>
            </p>
        </div>
    </div>
</div>
@section Scripts
{
<script type="text/javascript">
    var options = {
        extend: {
            "{root}.JobSchedules[i]" : function(JobSchedule)
            {
                var days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
                JobSchedule.DaysExecuted = [];
                $.each(days, function(i, curr)
                {
                    if (((1 << i) & JobSchedule.ExecutionSchedule()) > 0)
                    {
                        JobSchedule.DaysExecuted.push(curr);
                    }                   
                });

                JobSchedule.StatusDescription = ko.computed((function(){
                    if (!this.JobEnabled())
                    {
                        return "Disabled";
                    }
                    else
                    {
                        return this.JobStatus() == 0 ? "Idle" : "Running";
                    }
                }).bind(JobSchedule));

                JobSchedule.TimeOfDay = ko.computed((function(){
                    var time = this.ExecutionTime();
                    var seconds = time % 60;
                    var timeminutes = Math.floor(time / 60);
                    var minutes = timeminutes % 60;
                    var hours = Math.floor(timeminutes / 60) % 24;
                    var now = new Date();
                    now.setHours(hours);
                    now.setMinutes(minutes);
                    now.setSeconds(seconds);
                    return now.toLocaleTimeString();
                }).bind(JobSchedule));

                JobSchedule.JobScheduleUrl = ko.computed((function(){
                    return "@Url.Action("Index", "JobSchedule", new { })?jobScheduleId="+this.Id();
                }).bind(JobSchedule));
            }
        }
    }

    
    var viewmodel = ko.viewmodel.fromModel(@Html.Raw(JsonConvert.SerializeObject(Model)), options);

    ko.applyBindings(viewmodel, $("#relativity-script")[0]);
</script>
}
