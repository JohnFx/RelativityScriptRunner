@using Newtonsoft.Json
@using Milyli.ScriptRunner.Core.Models
@model JobScheduleModel
@{
    ViewBag.Title = Model.JobSchedule.Name;
    var days = new List<string>() { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
}
<style>
    .required label::after{
        content : " (required)";
    }

    .invalid label{
        font-style : italic;
        color: #af4c4c;
    }

    #mask {
        position:fixed;
        height:100%;
        width:100%;
        top:0px;
        left:0px;
        background: rgba(0,0,0,0.3);
        display : none;
    }

    .day-picker ul {
        list-style-type: none;
        margin: 0px;
        padding: 0px;
    }

    
    .schedule
    {
        display : flex;
        flex-direction : row;
        flex-wrap: wrap;
    }

    .schedule-section
    {
        flex-grow : 1;
    }

    .schedule-footer
    {
        flex-basis : 100%;
    }
    .schedule h4
    {
        font-weight : bold;
    }
    #JobName
    {
        width:80%;
    }
    .job-details label
    {
        min-width: 15em;        
    }
    .job-details label::after
    {
        content : ":";        
    }

    .run-script-container
    {
        display:none;
    }

    button:disabled
    {
        color: gray;
    }

    h3
    {
        padding:5px;
        border-radius: 3px 3px;
        font-weight:normal;
        font-size:12pt;
        width:100%;
        color:white;
        background-color:#173a71;
    }

    td {
        text-align:center;
        width : 25%;
    }

    th.pagination {
        margin:0px;
        text-align : left;
        width:100%;
    }

    .pagination .page-number
    {
        width:70%;
        float : left;
    }

    .pagination .page-size
    {
        width:20%;
        float : right;
    }
</style>

<div id="job-schedule-edit">
    <div id="mask"></div>
        <h3>Job Schedule Details - @Model.JobSchedule.Name</h3>
    <div id="edit-schedule" class="schedule">
        <div class="schedule-section">
            <div class="job-details">
                <h4>Job Details</h4>
                <div data-bind="with: JobSchedule">
                    <label>Job Name</label><input id="JobName" type="text" data-bind="value : Name"  maxlength="255" /><br />
                    <label>Last Execution Time</label><span data-bind="text : LastExecutionTimeString"></span><br />
                    <label>Next Execution Time</label> <span data-bind="text : NextExecutionTimeString"></span><br />
                    <label>Exectues At</label> 
                    <input data-bind="value : ExecutionTimeHours" type="number" min="1" max="12" step="1"/>:<input data-bind="value : ExecutionTimeMinutes" type="number" min="0" max="59" step="1"/>
                    <select data-bind="value:ExecutionTimeMeridian">
                        <option>AM</option>
                        <option>PM</option>
                    </select>
                </div>
                <div data-bind="with: RelativityWorkspace">
                    <label>Workspace</label><a href="@Url.Action("List", "RelativityScript", new { relativityWorkspaceId = Model.RelativityWorkspace.WorkspaceId })">@Model.RelativityWorkspace.Name</a>
                </div>
                <div data-bind="with: RelativityScript">
                    <label>Script</label><a data-bind="text : Name"
                                            href="@Url.Action("Script", "RelativityScript",
                                                 new { relativityWorkspaceId = Model.RelativityWorkspace.WorkspaceId, relativityScriptId = Model.RelativityScript.RelativityScriptId })"></a> (<span data-bind="text : RelativityScriptId"></span>)
                </div>
                <div>
                    <label>Job Status</label><span data-bind="text : JobStatusName"></span>
                    <span data-bind="if : AllowRun">
                        <button data-bind="click: RunJob">Run</button>
                    </span>
                    <span data-bind="ifnot : IsNew">
                        <span data-bind="if: JobSchedule.JobEnabled">
                            <button data-bind="click: DisableJob">Disable</button>
                        </span>
                        <span data-bind="ifnot: JobSchedule.JobEnabled()">
                            <button data-bind="click: EnableJob">Enable</button>
                        </span>
                    </span>
                </div>
            </div>
            <div>
                <h4>Execution Time</h4>
            </div>
            <div class="day-picker">
                <h4>Runs On</h4>
                <ul>
                    @foreach (var day in days)
                    {
                        <li>
                            <input type="checkbox" data-bind="checked: @day" />
                            <label>@day</label>
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="schedule-section">
            <h4>Script Inputs</h4>
            <div data-bind="foreach: JobScriptInputs" class="script-inputs">
                <div class="input-container" data-bind="css: { required : IsRequired(), invalid : IsInvalid() }">
                    <label data-bind="text: InputName">
                    </label>
                    <div data-bind="ifnot : Options">
                        <input type="text" data-bind="value: InputValue" />
                    </div>
                    <div data-bind="if: Options">
                        <select data-bind="options: Options, optionsText : 'name', optionsValue : 'value', value: InputValue"></select>
                    </div>
                </div>
            </div>
        </div>
        <div class="schedule-footer">
            <div data-bind="css : { 'error-notification' : IsInvalid() }, text : InvalidText"></div>
            <button id="save-job-schedule" data-bind="click: SaveJobSchedule, disable: IsInvalid, attr {title : InvalidText}">Save</button>
        </div>
        <div class="run-script-container">
            <iframe id="run-script" src="/Relativity/Case/RelativityScript/Run.aspx?AppID=@Model.RelativityWorkspace.WorkspaceId&ArtifactID=@Model.RelativityScript.RelativityScriptId"></iframe>
        </div>
    </div>
    <div id="job-schedule-history">
        <h3>Job history</h3>
        <a href="javascript:void window.open('/Relativity/Audit.aspx?AppID=@Model.RelativityWorkspace.WorkspaceId&ArtifactID=@Model.RelativityScript.RelativityScriptId&ArtifactTypeID=@RelativityScript.ScriptArtifactTypeId','audithistory','height=500,width=800,location=no,scrollbars=yes,menubar=no,toolbar=no,status=no,resizable=yes');">Audit (opens in new window)</a>
        <table>
            <thead>
                <tr>
                    <th colspan="3" class="pagination">
                        <div class="page-number">
                            <a href="javascript;" class="fa fa-fast-backward" data-bind="click : GoFirstPage"></a>
                            <a href="javascript;" class="fa fa-backward" data-bind="click : GoPreviousPage"></a>
                            <span data-bind="text : PageNumberText"></span>
                            <a href="javascript;" class="fa fa-forward" data-bind="click : GoNextPage"></a>
                            <a href="javascript;" class="fa fa-fast-forward" data-bind="click : GoLastPage"></a>
                        </div>
                        <div class="page-size">
                            <select data-bind="value : PageSize">
                                <option value="5">5</option>
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                            </select>
                        </div>
                    </th>
                </tr>
                <tr>
                    <th>Start Time</th>
                    <th>Running Time, Seconds</th>
                    <th>Result</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: JobHistory">
                <tr>
                    <td data-bind="text : StartTimeString"></td>
                    <td data-bind="text : Runtime"></td>
                    <td>
                        <span data-bind="if : HasError">
                            <span data-bind="ResultText"></span>
                        </span>
                        <span data-bind="ifnot : HasError">
                            Success
                        </span>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
@section Scripts
{
    <script type="text/javascript">
        //Used by the RunScript iframe.  Yes this is janky.
        function ResetTimeout()
        {

        };

        function unmask()
        {
            $("#mask").css("display", "none");
        };

        function mask()
        {
            $("#mask").css("display", "block");
        };

        function MakeOptionsArray($inputContainerElement)
        {
            return $inputContainerElement.find("option")
                .map(function(idx, element)
                {
                    var $element = $(element);
                    return {
                        value: $element.attr("value"),
                        name : $element.text()
                    };
                })
                .toArray();
        }

        //Yes we're finding script input DDLs by scraping. Yes this is janky. I have tried looking for a better way to grab input values in a better manner
        //but none of the RSAPI mechanisms for Relativity Scripts seems geared toward populating input lists.
        function getInputValues()
        {
            return $("#run-script").contents()
                                    .find("table.fieldTable")
                                    .map(function(idx, element)
                                    {
                                        var $element = $(element);
                                        var inputId = $element.find("tr:first").attr("id");
                                        var options = MakeOptionsArray($element);                                        
                                        return {
                                            inputId : inputId,
                                            options : options
                                        };
                                    })
            .toArray()
            .reduce(function(accum, curr){
                if(curr.options && curr.options.length)
                {
                    accum[curr.inputId] = curr.options;
                }
                return accum;
            },{});
        };


        var days  = @Html.Raw(JsonConvert.SerializeObject(days));
        var JobStatus =
        {
            "0" : "Idle",
            "1" : "Waiting for agent",
            "2" : "Running"
        };

        function error (responseData)
        {
            var message = responseData.responseJSON && responseData.responseJSON.Message ? 
                responseData.responseJSON.Message
                :
                responseData.responseText;
            alert(message);
        };

        toTimeString = function(timeString)
        {
            if(timeString)
            {
                var date = new Date(timeString.replace('T', ' '));
                if(!isNaN(date.getDay()))
                {
                    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
                }
            }
            return "Unknown";
        }

        $("#run-script").on("load", function()
        {
            var selectableInputValues = getInputValues();
            var options = {
                extend: {
                    "{root}.JobScriptInputs[i]" : function(JobScriptInput)
                    {
                        JobScriptInput.Options = selectableInputValues[JobScriptInput.InputId()];
                        JobScriptInput.SelectedValue = ko.observable();

                        JobScriptInput.IsInvalid = ko.computed(function()
                        {
                            var currentValue = JobScriptInput.InputValue();
                            return JobScriptInput.IsRequired() && !(currentValue && currentValue.trim && currentValue.trim());
                        });
                    },

                    "{root}.JobSchedule" : function(JobSchedule)
                    {
                        JobSchedule.NextExecutionTimeString = ko.computed(function(){
                            return toTimeString(JobSchedule.NextExecutionTime());
                        });

                        JobSchedule.LastExecutionTimeString = ko.computed(function(){
                            return toTimeString(JobSchedule.LastExecutionTime());
                        });

                        (function ()
                        {
                            var time = JobSchedule.ExecutionTime();
                            var minutes = Math.floor(time / 60);
                            var hours = Math.floor(minutes / 60);
                            var meridian = hours >= 12 ? "PM" : "AM";
                            hours = hours == 0 ? 12 : hours > 12 ? hours - 12 : hours;
                            var minuteValue = minutes % 60;
                        
                            JobSchedule.ExecutionTimeHours = ko.observable(hours);
                            JobSchedule.ExecutionTimeMinutes = ko.observable(minuteValue < 10 ? "0"+minuteValue : minuteValue);
                            JobSchedule.ExecutionTimeMeridian = ko.observable(meridian);
                        })();

                        var setTime = function(inputHours, inputMinutes, meridian)
                        {
                            var hours = parseInt(inputHours);
                            if(meridian=== "PM" && hours !== 12)
                            {
                                hours+=12;
                            }
                            if(meridian === "AM" && hours === 12)
                            {
                                hours = 0;
                            }
                            var minutes = parseInt(inputMinutes);
                            var timeSeconds = ((hours * 60) + minutes) * 60;
                            JobSchedule.ExecutionTime(timeSeconds);
                        }

                        JobSchedule.ExecutionTimeHours.subscribe(function(newValue)
                        {
                            setTime(newValue, JobSchedule.ExecutionTimeMinutes(), JobSchedule.ExecutionTimeMeridian());
                        });

                        JobSchedule.ExecutionTimeMinutes.subscribe(function(newValue)
                        {
                            setTime(JobSchedule.ExecutionTimeHours(), newValue, JobSchedule.ExecutionTimeMeridian());
                        });
                        JobSchedule.ExecutionTimeMeridian.subscribe(function(newValue)
                        {
                            setTime(JobSchedule.ExecutionTimeHours(), JobSchedule.ExecutionTimeMinutes(), newValue);
                        });
                    },

                    "{root}" : function(JobScheduleModel)
                    {
                        JobScheduleModel.AllowRun = ko.computed(function(){
                            return JobScheduleModel.JobSchedule.JobEnabled() && !JobScheduleModel.IsNew()
                        });

                        JobScheduleModel.JobStatusName = ko.computed(function()
                        {
                            if (JobScheduleModel.IsNew())
                            {
                                return "New";
                            }

                            if(!JobScheduleModel.JobSchedule.JobEnabled())
                            {
                                return "Disabled";
                            }

                            var status =  JobScheduleModel.JobSchedule.JobStatus();
                            if (JobStatus[status])
                            {
                                return JobStatus[status];
                            }
                            return "Unknown";
                        });

                        JobScheduleModel.InvalidInputs = ko.computed(function()
                        {
                            var invalidInputs = JobScheduleModel.JobScriptInputs()
                            .filter(function (jobScriptInput)
                            {
                                return jobScriptInput.IsInvalid();
                            })
                            .map(function (jobScriptInput)
                            {
                                return jobScriptInput.InputName();
                            });
                            return invalidInputs;
                        })

                        JobScheduleModel.IsInvalid = ko.computed(function()
                        {


                            var isInvalid = JobScheduleModel.InvalidInputs().length > 0;
                            return isInvalid;
                        });

                        JobScheduleModel.InvalidText = ko.computed(function()
                        {
                            if(JobScheduleModel.IsInvalid())
                            {
                                return "Inputs are required by invalid: " + JobScheduleModel.InvalidInputs().join(", ");
                            }
                            else
                            {
                                return "";
                            }
                        });

                        //Initialization
                        (function(){
                            var schedule = JobScheduleModel.JobSchedule.ExecutionSchedule();
                            $.each(days, function (idx, day) {
                                var dayEnabled = (schedule & (1 << idx)) > 0;
                                JobScheduleModel[day] = ko.observable(dayEnabled);
                                JobScheduleModel[day].subscribe(function (newValue) {
                                    var oldSchedule = JobScheduleModel.JobSchedule.ExecutionSchedule();
                                    var mask = newValue ? 1 << idx :  ~(1 << idx);
                                    var newSchedule = newValue ? oldSchedule | mask : oldSchedule & mask;
                                    JobScheduleModel.JobSchedule.ExecutionSchedule(newSchedule);
                                });
                            });
                        })();
                    }
                }
            };
            var viewmodel = ko.viewmodel.fromModel(@Html.Raw(JsonConvert.SerializeObject(Model)), options);
            
            viewmodel.SaveJobSchedule = function()
            {
                mask();
                $.ajax({
                    type :'POST',
                    url: "@Url.Action("Save")",
                    processData : false,
                    dataType: 'json',
                    contentType: "application/json",
                    data : ko.toJSON(ko.viewmodel.toModel(viewmodel))
                })
                .done(function(data)
                {
                    if(viewmodel.IsNew())
                    {
                        window.location.href("@Url.Action("Index")?jobScheduleId="+data.JobSchedule.Id);
                    }
                    else
                    {
                        ko.viewmodel.updateFromModel(viewmodel, data);
                    }
                })
                .fail(error)
                .always(function(data)
                {
                    unmask();
                });
            };

            viewmodel.DisableJob = function()
            {
                viewmodel.JobSchedule.JobEnabled(false);
                viewmodel.SaveJobSchedule();
            };

            viewmodel.EnableJob = function()
            {
                viewmodel.JobSchedule.JobEnabled(true);
                viewmodel.SaveJobSchedule();
            };


            viewmodel.RunJob = function(jobScheduleModel)
            {
                mask();
                $.ajax({
                    type :'POST',
                    url: "@Url.Action("Run")",
                    processData : false,
                    dataType: 'json',
                    contentType: "application/json",
                    data : ko.toJSON(jobScheduleModel.JobSchedule)
                })
                .done(function(data)
                {
                    ko.viewmodel.updateFromModel(viewmodel, data)
                })
                .fail(error)
                .always(function(data)
                {
                    unmask();
                });
            };
            ko.applyBindings(viewmodel, $("#edit-schedule")[0]);
        });

        // Job Schedule History //
        function LoadJobHistory (callback, page, pageSize)
        {
            var query = {};
            query.jobScheduleId = @Model.JobSchedule.Id;
            if(page)
            {
                query.page = page;
            }

            if(pageSize)
            {
                query.pageSize = pageSize;
            }

            $.ajax({
                type :'GET',
                url: "@Url.Action("JobHistory")",
                dataType: 'json',
                contentType: "application/json",
                data: query
            })
            .done(callback)
            .fail(error);
            
        }
        
        LoadJobHistory(function(jobHistoryModel)
        {
            var jobHistoryOptions = {
                extend : {
                    "{root}.JobHistory[i]" : function (JobHistory)
                    {
                        JobHistory.StartTimeString = ko.computed(function()
                        {
                            return toTimeString(JobHistory.StartTime());
                        });
                    },
                    "{root}" : function(JobHistoryModel)
                    {

                        JobHistoryModel.CurrentStart = ko.computed(function()
                        {
                            return JobHistoryModel.PageNumber() * JobHistoryModel.PageSize();
                        });

                        JobHistoryModel.HasNextPage = ko.computed(function()
                        {
                            var startResultNum = JobHistoryModel.CurrentStart();
                            return (startResultNum + JobHistoryModel.PageSize()) < JobHistoryModel.ResultCount();
                        });

                        JobHistoryModel.HasPreviousPage = ko.computed(function()
                        {
                            return JobHistoryModel.PageNumber() > 0;
                        });

                        JobHistoryModel.LastPage = ko.computed(function()
                        {
                            return Math.floor(JobHistoryModel.ResultCount() / JobHistoryModel.PageSize());
                        });

                        JobHistoryModel.FirstPage = ko.computed(function()
                        {
                            return 0;
                        });

                        JobHistoryModel.PageNumberText = ko.computed(function()
                        {
                            var lastPage = JobHistoryModel.LastPage() + 1;
                            var currentPage = JobHistoryModel.PageNumber() + 1;

                            if(lastPage == 1)
                            {
                                return "Page 1 of 1";
                            }
                            else
                            {
                                return "Page " + currentPage + " of " + lastPage;
                            }
                        });
                    }
                }
            }
            var jobHistoryViewModel = ko.viewmodel.fromModel(jobHistoryModel, jobHistoryOptions);            
            jobHistoryViewModel.updating = true;

            jobHistoryViewModel.Go = function(page, precondCallback)
            {
                var precond = typeof(precondCallback) === "function" ? precondCallback() : true;
                if(precond)
                {
                    LoadJobHistory(function(jobHistoryModel)
                    {
                        jobHistoryViewModel.updating = true;
                        ko.viewmodel.updateFromModel(jobHistoryViewModel, jobHistoryModel);
                        jobHistoryViewModel.updating = false;
                    }, page, jobHistoryViewModel.PageSize());
                }                
            };

            jobHistoryViewModel.SelectPageSize = function()
            {
                if(!jobHistoryViewModel.updating)
                {
                    var newValue = jobHistoryViewModel.PageSize();
                    var newPage = Math.floor(jobHistoryViewModel.CurrentStart() / newValue);
                    jobHistoryViewModel.Go(newPage);
                }
            };

            jobHistoryViewModel.PageSize.subscribe(jobHistoryViewModel.SelectPageSize);

            jobHistoryViewModel.GoNextPage = function()
            {
                jobHistoryViewModel.Go(jobHistoryViewModel.PageNumber() + 1, jobHistoryViewModel.HasNextPage);
            };

            jobHistoryViewModel.GoPreviousPage = function()
            {
                jobHistoryViewModel.Go(jobHistoryViewModel.PageNumber() - 1, jobHistoryViewModel.HasPreviousPage);
            };

            jobHistoryViewModel.GoFirstPage = function()
            {
                jobHistoryViewModel.Go(0);
            };

            jobHistoryViewModel.GoLastPage = function()
            {
                jobHistoryViewModel.Go(jobHistoryViewModel.LastPage());
            };
                        
            ko.applyBindings(jobHistoryViewModel, $("#job-schedule-history")[0]);
            jobHistoryViewModel.updating = false;
        });

    </script>
}

