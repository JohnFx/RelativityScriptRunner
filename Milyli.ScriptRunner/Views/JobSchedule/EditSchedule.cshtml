@using Newtonsoft.Json
@model JobScheduleModel
@{
    ViewBag.Title = "New Schedule";
    var days = new List<string>() { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
}
<style>
    label.required {
        font-weight : bold;
    }

    label.invalid {
        font-style : italic;
    }

    #mask {
        position:fixed;
        height:100%;
        width:100%;
        top:0px;
        left:0px;
        background: rgba(0,0,0,0.3);
        display : none;
    }

    .day-picker ul {
        list-style-type: none;
        margin: 0px;
        padding: 0px;
    }

    
    .schedule
    {
        display : flex;
        flex-direction : row;
        flex-wrap: wrap;
    }

    .schedule-section
    {
        flex-grow : 1;
    }

    .schedule-footer
    {
        flex-basis : 100%;
    }
    .schedule h4
    {
        font-weight : bold;
    }
    .job-details input
    {
        width:80%;
    }
    .job-details label::after
    {
        content : ":";        
    }
</style>

<div id="edit-schedule">
    <div id="mask"></div>
        <h3>Schedule</h3>
    <div class="schedule">
        <div class="schedule-section">
            <div class="job-details">
                <h4>Job Details</h4>
                <div data-bind="with: JobSchedule">
                    <label>Job Name</label><input type="text" data-bind="value : Name"  maxlength="255" />
                    <label>Last Execution Time</label> <span data-bind="text : LastExecutionTime"></span> <label>Next Execution Time</label> <span data-bind="text : NextExecutionTime"></span>
                </div>
                <div data-bind="with: RelativityWorkspace">
                    <label>Workspace</label><span data-bind="text : Name"></span> (<span data-bind="text : WorkspaceId"></span>)
                </div>
                <div data-bind="with: RelativityScript">
                    <label>Script</label><span data-bind="text : Name"></span> (<span data-bind="text : RelativityScriptId"></span>)
                </div>
                <div>
                    <label>Job Status</label><span data-bind="text : JobStatusName"></span>
                </div>
            </div>
            <div>
                <h4>Execution Time</h4>
            </div>
            <div class="day-picker">
                <h4>Runs On</h4>
                <ul>
                    @foreach (var day in days)
                    {
                        <li>
                            <input type="checkbox" data-bind="checked: @day" />
                            <label>@day</label>
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="schedule-section">
            <h4>Script Inputs</h4>
            <div data-bind="foreach: JobScriptInputs" class="script-inputs">
                <div data-bind="text: InputName, css: { required : IsRequired(), invalid : IsInvalid() }">
                </div>
                <div>
                    <input type="text" data-bind="value: InputValue, css: { required : IsRequired(), invalid : IsInvalid() }" />
                </div>
            </div>
        </div>
        <div class="schedule-footer">
            <button data-bind="click: SaveJobSchedule">Save</button>
        </div>
    </div>
</div>
@section Scripts
{
    <script type="text/javascript">
        function unmask()
        {
            $("#mask").css("display", "none");
        };

        function mask()
        {
            $("#mask").css("display", "block");
        }


        var days  = @Html.Raw(JsonConvert.SerializeObject(days));
        var JobStatus = 
        {
            "0" : "Idle",
            "1" : "Waiting",
            "2" : "Running"
        };

        var options = {
            extend: {
                "{root}.JobScriptInputs[i]" : function(JobScriptInput)
                {
                    JobScriptInput.IsInvalid = ko.computed(function()
                    {
                        var currentValue = JobScriptInput.InputValue();
                        return !(currentValue && currentValue.trim && currentValue.trim());
                    });
                },
                
                "{root}" : function(JobScheduleModel)
                {                    
                    JobScheduleModel.JobStatusName = ko.computed(function()
                    {
                        var status =  JobScheduleModel.JobSchedule.JobStatus();
                        if (JobStatus[status])
                        {
                            return JobStatus[status];
                        }
                        return "Unknown";
                    });

                    JobScheduleModel.SaveJobSchedule = function()
                    {
                        mask();
                        $.ajax({
                            type :'POST',
                            url: "@Url.Action("Save")",
                            processData : false,
                            dataType: 'json',
                            contentType: "application/json",
                            data : ko.toJSON(JobScheduleModel)
                        })
                        .done(function(data)
                        {
                            window.location.href = "@Url.Action("Index")?jobScheduleId="+data.JobSchedule.Id;
                        })
                        .always(function(data)
                        {
                            unmask();
                        });
                    };

                    var schedule = JobScheduleModel.JobSchedule.ExecutionSchedule();
                    $.each(days, function (idx, day) {
                        var dayEnabled = (schedule & (1 << idx)) > 0;
                        JobScheduleModel[day] = ko.observable(dayEnabled);
                        JobScheduleModel[day].subscribe(function (newValue) {
                            var oldSchedule = JobScheduleModel.JobSchedule.ExecutionSchedule();
                            var mask = newValue ? 1 << idx :  ~(1 << idx);
                            var newSchedule = newValue ? oldSchedule | mask : oldSchedule & mask;
                            JobScheduleModel.JobSchedule.ExecutionSchedule(newSchedule);
                        });
                    });

                    JobScheduleModel.Validate = function()
                    {
                        var validationResults = JobScheduleModel.JobScriptInputs().reduce(function(accum, scriptInput)
                        {
                            if(scriptInput.IsRequired())
                            {
                                var currentValue = scriptInput.InputValue();
                                if(!(currentValue && currentValue.trim && currentValue.trim()))
                                {
                                    accum[scriptInput.InputName()] = "Input Required";
                                }
                            }
                            return accum;
                        }, {});
                    };
                }
            }
        };
        var viewmodel = ko.viewmodel.fromModel(@Html.Raw(JsonConvert.SerializeObject(Model)), options);
        
        ko.applyBindings(viewmodel, $("#edit-schedule")[0]);
    </script>
}

