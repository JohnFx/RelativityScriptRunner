<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Targets>
  <Target Name="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\bin\Debug\Milyli.ScriptRunner.Data.Test.dll">
   <Modules>
    <Module Name="milyli.scriptrunner.data.test.dll">
     <Messages>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'Milyli.ScriptRunner.Data.Test.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Milyli.ScriptRunner.Core.Test.IntegrationTests">
       <Types>
        <Type Name="TestJobScheduleRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TestCompetingStartup()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\IntegrationTests" File="TestJobScheduleRepository.cs" Line="42">Method 'TestJobScheduleRepository.TestCompetingStartup()' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Expected to find job statuses of Started and AlreadyRunning, found ,  and ".</Issue>
            </Message>
            <Message Id="AlreadyRunning" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\IntegrationTests" File="TestJobScheduleRepository.cs" Line="42">Correct the spelling of the unrecognized token 'AlreadyRunning' in the literal '"Expected to find job statuses of Started and AlreadyRunning, found "'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\IntegrationTests" File="TestJobScheduleRepository.cs" Line="42">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'TestJobScheduleRepository.TestCompetingStartup()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestCurrentJobsToExecute()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\IntegrationTests" File="TestJobScheduleRepository.cs" Line="61">Method 'TestJobScheduleRepository.TestCurrentJobsToExecute()' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Expected at least one active job schedule".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestJobFinish()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\IntegrationTests" File="TestJobScheduleRepository.cs" Line="120">Method 'TestJobScheduleRepository.TestJobFinish()' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Expected a last execution record".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\IntegrationTests" File="TestJobScheduleRepository.cs" Line="121">Method 'TestJobScheduleRepository.TestJobFinish()' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Expected a non-zero runtime duration".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestJobsOutOfBounds()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\IntegrationTests" File="TestJobScheduleRepository.cs" Line="101">Method 'TestJobScheduleRepository.TestJobsOutOfBounds()' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Did not expect jobs of ids ,  and , , but found those jobs".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\IntegrationTests" File="TestJobScheduleRepository.cs" Line="100">Method 'TestJobScheduleRepository.TestJobsOutOfBounds()' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "There should be one job (id , ) in the result".</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\IntegrationTests" File="TestJobScheduleRepository.cs" Line="100">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TestJobScheduleRepository.TestJobsOutOfBounds()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\IntegrationTests" File="TestJobScheduleRepository.cs" Line="101">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'TestJobScheduleRepository.TestJobsOutOfBounds()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestRelativityScriptRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TestGetScripts()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\IntegrationTests" File="TestRelativityScriptRepository.cs" Line="22">Method 'TestRelativityScriptRepository.TestGetScripts()' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "we are expecting some scripts in the admin workspace".</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestRelativityWorkspaceRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TestGetWorkspaces()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\IntegrationTests" File="TestRelativityWorkspaceRepository.cs" Line="22">Method 'TestRelativityWorkspaceRepository.TestGetWorkspaces()' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Should have some workspaces".</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Milyli.ScriptRunner.Core.Test.UnitTests">
       <Types>
        <Type Name="TestBitmaskHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TestMakeMask(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestBitmaskHelper.cs" Line="17">Method 'TestBitmaskHelper.TestMakeMask(int, int)' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Got , , expected ,  for len , , offset ".</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestBitmaskHelper.cs" Line="13">The 'this' parameter (or 'Me' in Visual Basic) of 'TestBitmaskHelper.TestMakeMask(int, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestBitmaskHelper.cs" Line="17">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'TestBitmaskHelper.TestMakeMask(int, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestRotateLeft(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestBitmaskHelper.cs" Line="46">Method 'TestBitmaskHelper.TestRotateLeft(int)' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Expectd , , Got ".</Issue>
            </Message>
            <Message Id="Expectd" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestBitmaskHelper.cs" Line="46">Correct the spelling of the unrecognized token 'Expectd' in the literal '"Expectd "'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestBitmaskHelper.cs" Line="36">The 'this' parameter (or 'Me' in Visual Basic) of 'TestBitmaskHelper.TestRotateLeft(int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestBitmaskHelper.cs" Line="46">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'TestBitmaskHelper.TestRotateLeft(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestRotateRight()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestBitmaskHelper.cs" Line="22">The 'this' parameter (or 'Me' in Visual Basic) of 'TestBitmaskHelper.TestRotateRight()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestJobSchedule" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TestBadSchedule()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestJobSchedule.cs" Line="15">Method 'TestJobSchedule.TestBadSchedule()' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Empty schedule entry should have no next execution time".</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestJobSchedule.cs" Line="12">The 'this' parameter (or 'Me' in Visual Basic) of 'TestJobSchedule.TestBadSchedule()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestEverydayExecution()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestJobSchedule.cs" Line="53">Method 'TestJobSchedule.TestEverydayExecution()' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Expected next execution time of , , got ".</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestJobSchedule.cs" Line="38">The 'this' parameter (or 'Me' in Visual Basic) of 'TestJobSchedule.TestEverydayExecution()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestJobSchedule.cs" Line="53">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'TestJobSchedule.TestEverydayExecution()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestNextWeekExecution()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestJobSchedule.cs" Line="33">Method 'TestJobSchedule.TestNextWeekExecution()' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Expected next execution time of , , got ".</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestJobSchedule.cs" Line="20">The 'this' parameter (or 'Me' in Visual Basic) of 'TestJobSchedule.TestNextWeekExecution()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestJobSchedule.cs" Line="33">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'TestJobSchedule.TestNextWeekExecution()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestSunday()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestJobSchedule.cs" Line="70">Method 'TestJobSchedule.TestSunday()' passes a literal string as parameter 'message' of a call to 'Assert.That(bool, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Expected next execution time of , , got ".</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestJobSchedule.cs" Line="58">The 'this' parameter (or 'Me' in Visual Basic) of 'TestJobSchedule.TestSunday()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestJobSchedule.cs" Line="70">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'TestJobSchedule.TestSunday()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TestRelativityScriptRunner" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TestExecptionThrown()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestRelativityScriptRunner.cs" Line="41">'TestRelativityScriptRunner.TestExecptionThrown()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Execption" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestRelativityScriptRunner.cs" Line="38">Correct the spelling of 'Execption' in member name 'TestRelativityScriptRunner.TestExecptionThrown()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestRelativityScriptRunner.cs" Line="38">The 'this' parameter (or 'Me' in Visual Basic) of 'TestRelativityScriptRunner.TestExecptionThrown()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestGoodRun()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="kCura.Relativity.Client.RelativityScriptResult.set_Message(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestRelativityScriptRunner.cs" Line="18">Method 'TestRelativityScriptRunner.TestGoodRun()' passes a literal string as parameter 'value' of a call to 'RelativityScriptResult.Message.set(string)'. Retrieve the following string(s) from a resource table instead: "unit test result".</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2017-04-27 20:47:25Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\Golding\Source\Repos\Milyli ScriptRunner\Milyli.ScriptRunner.Data.Test\UnitTests" File="TestRelativityScriptRunner.cs" Line="16">The 'this' parameter (or 'Me' in Visual Basic) of 'TestRelativityScriptRunner.TestGoodRun()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
