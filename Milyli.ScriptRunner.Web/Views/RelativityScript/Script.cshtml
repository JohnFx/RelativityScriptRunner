@using Newtonsoft.Json
@model RelativityScriptModel
@{
    ViewBag.Title = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3>@ViewBag.Title - Script Scheduling Information (<a href="@Url.Action("List", new { relativityWorkspaceId = Model.RelativityWorkspace.WorkspaceId })">@Model.RelativityWorkspace.Name</a>)</h3>    
@*<div data-bind="visible: !HasJobs"><h2>No Scheduled Jobs</h2></div>*@
<div class="schedule-container row" id="relativity-script" data-bind="foreach : JobSchedules">
    <div class="col-lg-3 col-md-6 col-sm-12 col-xs-12">
		<div class="panel panel-default">
			<div class="panel-heading"><a data-bind="text : Name, attr : { href : JobScheduleUrl }"></a></div>
			<div class="panel-body">
				<span data-bind="text : StatusDescription"></span>
				<p>Last Ran <span data-bind="text: LastExecution"></span></p>
				<p>Runs Next at <span data-bind="text: NextExecution"></span></p>
				<p>
					Executes At <span data-bind="text : TimeOfDay"></span> On
					<ul class="list-inline list-group" data-bind="foreach : DaysExecuted">
                        <li class="label label-default" data-bind="text : $data"></li>
					</ul>
				</p>
			</div>
		</div>
    </div>
</div>
@section Scripts
{
<script type="text/javascript">
    var options = {
        extend: {
            "{root}.JobSchedules[i]" : function(JobSchedule)
            {
                var days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
                JobSchedule.DaysExecuted = [];
                $.each(days, function(i, curr)
                {
                    if (((1 << i) & JobSchedule.ExecutionSchedule()) > 0)
                    {
                        JobSchedule.DaysExecuted.push(curr);
                    }                   
                });

                JobSchedule.StatusDescription = ko.computed((function(){
                    if (!this.JobEnabled())
                    {
                        return "Disabled";
                    }
                    else
                    {
                        return this.JobStatus() == 0 ? "Idle" : "Running";
                    }
                }).bind(JobSchedule));
                
                JobSchedule.LastExecution = ko.computed(function(){
                	return toTimeString(JobSchedule.LastExecutionTime());
                });


                JobSchedule.NextExecution = ko.computed(function(){
                	if (!JobSchedule.JobEnabled())
                	{
                		return "Disabled";
                	}
                	else
                	{
                		return toTimeString(JobSchedule.NextExecutionTime());
                	}
                });

                JobSchedule.TimeOfDay = ko.computed((function(){
                    var time = this.ExecutionTime();
                    var seconds = time % 60;
                    var timeminutes = Math.floor(time / 60);
                    var minutes = timeminutes % 60;
                    var hours = Math.floor(timeminutes / 60) % 24;
                    var now = new Date();
                    now.setHours(hours);
                    now.setMinutes(minutes);
                    now.setSeconds(seconds);
                    return now.toLocaleTimeString();
                }).bind(JobSchedule));

                JobSchedule.JobScheduleUrl = ko.computed((function(){
                    return "@Url.Action("Index", "JobSchedule", new { })?jobScheduleId="+this.Id();
                }).bind(JobSchedule));
            }
        }
    }

    
    var viewmodel = ko.viewmodel.fromModel(@Html.Raw(JsonConvert.SerializeObject(Model)), options);
    viewmodel.HasJobs = viewmodel.JobSchedules().length > 0;
    debugger;
    ko.applyBindings(viewmodel, $("#relativity-script")[0]);
</script>
}
